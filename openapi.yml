openapi: 3.0.4
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  
    You can find out more about Swagger at [https://swagger.io](https://swagger.io).  
    In the third iteration of the pet store, we've switched to the design first approach!  
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.  

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: document
    description: document
    externalDocs:
      description: Find out more
      url: https://swagger.io

paths:
  /document:
    post:
      tags:
        - document
      summary: Upload a document
      description: >
        Upload a document file.  
        Optionally provide metadata fields such as title, created datetime, correspondent, etc.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload.
                title:
                  type: string
                  description: Specify a title for the document.
                created:
                  type: string
                  format: date-time
                  description: >
                    DateTime when the document was created.  
                    Examples: "2016-04-19", "2016-04-19 06:15:00+02:00"
                correspondent:
                  type: string
                  description: ID of a correspondent related to the document.
                document_type:
                  type: string
                  description: Document type ID.
                storage_path:
                  type: string
                  description: Storage path ID.
                tags:
                  type: array
                  items:
                    type: string
                  description: >
                    One or more tag IDs.  
                    Pass this multiple times in form-data to assign multiple tags.
                archive_serial_number:
                  type: string
                  description: Optional archive serial number to set.
                custom_fields:
                  type: array
                  items:
                    type: string
                  description: >
                    Array of custom field IDs to assign (empty values allowed).
      responses:
        "201":
          description: Document successfully uploaded and processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "400":
          description: Bad request (e.g., invalid file or wrong metadata format).
        "500":
          description: Server error

    get:
      tags:
        - document
      summary: Get all documents
      description: Retrieve a list of all documents.
      responses:
        "200":
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        "400":
          description: Bad request
        "500":
          description: Server error
        

  /document/{id}:
    get:
      tags:
        - document
      summary: Get document by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Document successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "400":
          description: Bad request (e.g., invalid ID format)
        "404":
          description: Document not found
        "500":
          description: Server error
          
    put:
      tags:
        - document
      summary: Update a document by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        "200":
          description: Document successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "400":
          description: Bad request
        "404":
          description: Document not found
        "500":
          description: Server error

    delete:
      tags:
        - document
      summary: Delete a document by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Document successfully deleted (no content)
        "400":
          description: Bad request
        "404":
          description: Document not found
        "500":
          description: Server error

components:
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the uploaded document.
        title:
          type: string
        summary:
          type: string
          description: Auto-generated summary of the document.
        ocr_text:
          type: string
          description: Extracted text from OCR.

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag

    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

services:
  paperless-webui:
    build:
      context: .
      dockerfile: paperlessWebUI/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - paperless-rest
    profiles: ["deploy"]
  paperless-rest:
    build:
      context: . # Root des Projekts
      dockerfile: paperlessREST/Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      PLUSER: ${PLUSER}
      PLUSER_PASSWORD: ${PLUSER_PASSWORD}
      # Kafka settings (to send document events)
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_LISTENER_MISSING_TOPICS_FATAL: "false"
      SPRING_KAFKA_CONSUMER_GROUP_ID: demo-consumer-group
      SPRING_KAFKA_CONSUMER_CLIENT_ID: api-client-id
      KAFKA_TOPIC_OCR: doc.ocr
      KAFKA_TOPIC_RESULT: doc.ocr.result
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    profiles: ["deploy", "backend"]
  postgres:
    build: infra/postgres/.
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PLUSER: ${PLUSER}
      PLUSER_PASSWORD: ${PLUSER_PASSWORD}
      #POSTGRES_DB: bookstore
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["deploy", "kafka", "db", "backend"]

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - ./infra/postgres/pgadmin-servers.json:/pgadmin4/servers.json
    profiles: ["deploy", "kafka", "db", "backend"]

  # ===============================
  # KAFKA (Single Broker Mode)
  # ===============================
  kafka:
    image: apache/kafka:latest
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    profiles: ["deploy", "kafka", "backend"]

  # ===============================
  # OCR WORKER (Kafka Consumer)
  # ===============================
  ocr-worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    restart: always
    depends_on:
      kafka:
        condition: service_started
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: ocr-worker-group
      KAFKA_TOPIC_INPUT: doc.ocr
      KAFKA_TOPIC_OUTPUT: doc.ocr.result
      KAFKA_TOPIC_DLQ: doc.ocr.dlq
      LOGGING_LEVEL_APP: DEBUG
      SERVER_PORT: 8085
    ports:
      - "8085:8085"
    profiles: ["deploy", "backend"]

volumes:
  postgres-data:
  pgadmin-data:

